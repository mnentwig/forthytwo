// Fractal demo control code
// (c) Markus Nentwig 2019-2020

//address 0 (reset vector)

// this is a bootloader project:
#include(../bootloader/bootloader.txt)

BRA:main // skip over code from included files
#include(../libs/core.txt)
#include(../libs/system.txt)
#include(../libs/system.ASCII.txt)
#include(../libs/math.txt)
#include(../libs/flm.txt)
#include(driver.txt)
#include(../libs/flmMatrix.txt)
#include(pointsImported.txt)
VAR:dataEnd=0xdeadbeef
VAR:dataPtrA=0xdeadbeef
VAR:dataPtrB=0xdeadbeef
VAR:x1=0
VAR:dx1=0
VAR:ddx1=0
VAR:y1=0
VAR:dy1=0
VAR:ddy1=0
VAR:x2=0
VAR:dx2=0
VAR:ddx2=0
VAR:y2=0
VAR:dy2=0
VAR:ddy2=0
VAR:nHalfSteps=150
VAR:lastFrameNum=0xFFFFFFFF

// note: frameCount is updated by the hardware immediately after the fractal parameters have been copied.
:waitForStartOfFrame
	// control LEDs with buttons (use to check that code is still running)
	driver.getButtons driver.setLEDs

	BEGIN
		'lastFrameNum @
		driver.getHardwareFrameNum
		core.equals
		core.invert
	UNTIL
	driver.getHardwareFrameNum
	'lastFrameNum
	!
;

// in 1:v1 0:v2
// out 1:v1 0:ddv 
:calcAcceleration	
	// v2-v1
	core.over
	flm.negate
	flm.add
	
	// 4*nSteps^2
	'nHalfSteps @ 0 core.lshift
	dup
	math.u32*u32
	flm.int2flt
	
	flm.div	
;

:varAddFltToVar
	@ over @ flm.add swap !
;

:fetchAndAdvanceDataPtr
	dup	// copy pointer address for store
	@	// retrieve data address
	dup @ >r // recall and save data
	4 + 	// advance data addresss
	dup 'dataEnd core.equals // check for end of data
	IF drop 'myData0 ENDIF // if yes, replace with start of data
	swap ! 	// store updated value
	r>	// return data
;

:loadNextPoint_fetchAndCalc
	'dataPtrA fetchAndAdvanceDataPtr // get start value
	'dataPtrB fetchAndAdvanceDataPtr // get stop value
	calcAcceleration
;

:flt2rtlFp 1 29 core.lshift flm.int2flt flm.mul flm.flt2int ;

:loadNextPointToInterpolators
	loadNextPoint_fetchAndCalc
	'ddx1 ! 'x1 ! 0 'dx1 !
	loadNextPoint_fetchAndCalc
	'ddy1 ! 'y1 ! 0 'dy1 !
	loadNextPoint_fetchAndCalc
	'ddx2 ! 'x2 ! 0 'dx2 !
	loadNextPoint_fetchAndCalc
	'ddy2 ! 'y2 ! 0 'dy2 !
;

:reverseAcceleration
	dup @ flm.negate swap !
;

VAR:w=0
VAR:h=0
VAR:xCenter=0
VAR:yCenter=0

VAR:p[0]=0 // vector (brackets are just letters)
VAR:p[1]=0

VAR:q[0]=0 // vector
VAR:q[1]=0

VAR:rot[0_0]=0 // matrix
VAR:rot[1_0]=0
VAR:rot[0_1]=0
VAR:rot[1_1]=0
VAR:angle=0.2

:setX1X2Y1Y2
	// === init w, h, xCenter, yCenter ===
	'x2 @ 'x1 @ flm.negate flm.add dup 'w !
	'y2 @ 'y1 @ flm.negate flm.add dup 'h !
	'x1 @ 'x2 @ flm.add 2.0 flm.div 'xCenter !
	'y1 @ 'y2 @ flm.add 2.0 flm.div 'yCenter !

	// === calculate rotation matrix in rot[] ===
	'angle @ 'rot[0_0] flm.rot2DPiX

	// === initialize start point vector [-w/2, -h/2] relative to center ===
	'x1 @ 'xCenter @ flm.negate flm.add 'p[0] !
	'y1 @ 'yCenter @ flm.negate flm.add 'p[1] !

	// === rotate start point vector ===
	'rot[0_0] 'p[0] 'q[0] flm.m2xv2

	// === set start point ===
	'q[0] @ 'xCenter @ flm.add driver.fractal.setX
	'q[1] @ 'yCenter @ flm.add driver.fractal.setY

	// === initialize first direction vector (pixel moves right) ===
	'w @ 'p[0] ! 
	0 'p[1] !

	// === rotate q=rot*p ===
	'rot[0_0] 'p[0] 'q[0] flm.m2xv2

	// === set first dimension increment ===
	'q[0] @ driver.fractal.setDxCol
	'q[1] @ driver.fractal.setDyCol

	// === initialize second direction vector (pixel moves down) ===
	0 'p[0] ! 
	'h @ 'p[1] !

	// === rotate q=rot*p ===
	'rot[0_0] 'p[0] 'q[0] flm.m2xv2

	// === set second dimension increment ===
	'q[0] @ driver.fractal.setDxRow 
	'q[1] @ driver.fractal.setDyRow

;

:setMaxiterAndEndOfColMap
	core.dup 
	driver.fractal.setMaxiter
	// === end is always black ===
	1 core.plus // highest possible alg output is maxiter+1
	0x0 // rgb value
	driver.fractal.setColMap
	// === start is always black ===
	0x0 0x0	driver.fractal.setColMap		
;

VAR:colMapCycle=0
VAR:colMapCycleCount=0

:setColMapMulti
	1 64 DO core.pushR
	  // n Iterations
	  core.fetchR
	  // value
	  core.fetchR
	  'colMapCycle @ core.plus
	  driver.fractal.setColMap  
	core.popR LOOP
;

:setColMapWhite1
	1 64 DO core.pushR
	  // n Iterations
	  core.fetchR
	  // value
	  core.fetchR 7 core.and
	  'colMapCycle @ core.invert 7 core.and core.equals
	  driver.fractal.setColMap  
	core.popR LOOP
;

:setColMapRgbZebra
	// === set all black ===
	1 64 DO 
	  // n Iterations
	  dup
	  // value
	  0
	  driver.fractal.setColMap  
	LOOP

	// === retrieve colMapCycle ===
	'colMapCycle @ core.invert
	// === set one red stripe ===
	dup 0 core.plus 63 core.and /*RGB: red*/1 driver.fractal.setColMap
	// === set one green stripe ===
	dup 11 core.plus 63 core.and /*RGB: green*/2 driver.fractal.setColMap
	// === set one blue stripe ===
	dup 21 core.plus 63 core.and /*RGB: blue*/4 driver.fractal.setColMap
	// === set one red stripe ===
	dup 32 core.plus 63 core.and /*RGB: red*/1 driver.fractal.setColMap
	// === set one green stripe ===
	dup 42 core.plus 63 core.and /*RGB: green*/2 driver.fractal.setColMap
	// === set one blue stripe ===
	53 core.plus 63 core.and /*RGB: blue*/4 driver.fractal.setColMap
;

VAR:colormode=0
:nextColormode
	'colormode @
	core.dup 3 core.equals IF
		 core.drop 0
	ELSE
		1 core.plus
	ENDIF
	'colormode !
;

:cycleColMap
	'colMapCycle @ 0 core.invert core.plus 'colMapCycle !
;

:resetColMap
	0 'colMapCycle !
;

:advanceAnimationColMap
	  'colMapCycleCount @
	  12 core.equals IF
	     0 'colMapCycleCount !

	     'colormode @
	     core.dup 0 core.equals IF
		     cycleColMap
		     setColMapMulti
		     45 setMaxiterAndEndOfColMap
	     ENDIF
	     core.dup 1 core.equals IF
		     resetColMap
	      	     setColMapMulti
		     45 setMaxiterAndEndOfColMap
             ENDIF
	     core.dup 2 core.equals IF
		     cycleColMap
	      	     setColMapRgbZebra
		     45 setMaxiterAndEndOfColMap
             ENDIF
	     3 core.equals IF
		     cycleColMap
	      	     setColMapWhite1
		     45 setMaxiterAndEndOfColMap
             ENDIF

	  ELSE
	    'colMapCycleCount dup @ 1 core.plus swap !
	  ENDIF	  
;

::nextAngle
	  'angle @ 0.001 flm.add 'angle !
;

:advanceAnimation
	nextAngle
	advanceAnimationColMap

	driver.buttons.getEvt
	IF
		nextColormode
	ENDIF
;

:main
	// === send a letter to UART to give feedback on FW upload ===
	system.ascii.1 system.uart.putChar system.emit.cr

	setColMapMulti

	1 driver.fractal.onOff // TBD move this later
	42 setMaxiterAndEndOfColMap

	// === init data pointers to first and second point in list ===
	'myData0 'dataPtrA !
	'myData4 'dataPtrB !

BEGIN
	loadNextPointToInterpolators

	// === accelerating half ===
	0 'nHalfSteps @ DO >r
	  waitForStartOfFrame
	  advanceAnimation // during HSYNC period to avoid tearing (no shadow registers)
	  setX1X2Y1Y2	

	  'dx1 'ddx1 varAddFltToVar
	  'x1 'dx1 varAddFltToVar

	  'dy1 'ddy1 varAddFltToVar
	  'y1 'dy1 varAddFltToVar

	  'dx2 'ddx2 varAddFltToVar
	  'x2 'dx2 varAddFltToVar

	  'dy2 'ddy2 varAddFltToVar
	  'y2 'dy2 varAddFltToVar
	r> LOOP

	// === change to deceleration ===
	'ddx1 reverseAcceleration
	'ddy1 reverseAcceleration
	'ddx2 reverseAcceleration
	'ddy2 reverseAcceleration

	// === decelerating part ===
	0 'nHalfSteps @ DO >r
	  waitForStartOfFrame
	  advanceAnimation // during HSYNC period to avoid tearing (no shadow registers)
	  setX1X2Y1Y2	

	  'dx1 'ddx1 varAddFltToVar
	  'x1 'dx1 varAddFltToVar

	  'dy1 'ddy1 varAddFltToVar
	  'y1 'dy1 varAddFltToVar

	  'dx2 'ddx2 varAddFltToVar
	  'x2 'dx2 varAddFltToVar

	  'dy2 'ddy2 varAddFltToVar
	  'y2 'dy2 varAddFltToVar
	r> LOOP
AGAIN
