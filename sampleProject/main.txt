//address 0 (reset vector)
BRA:main // skip over code from included files
#include(../libs/core.txt)
#include(../libs/system.txt)
#include(../libs/system.ASCII.txt)
#include(../libs/math.txt)
#include(../libs/flm.txt)
#include(pointsImported.txt)
VAR:dataEnd=0xdeadbeef
VAR:dataPtrA=0xdeadbeef
VAR:dataPtrB=0xdeadbeef
VAR:x1=0
VAR:dx1=0
VAR:ddx1=0
VAR:y1=0
VAR:dy1=0
VAR:ddy1=0
VAR:x2=0
VAR:dx2=0
VAR:ddx2=0
VAR:y2=0
VAR:dy2=0
VAR:ddy2=0
VAR:nHalfSteps=50

:panic system.dumpStack system.terminate

// in 1:v1 0:v2
// out 1:v1 0:ddv 
:calcAcceleration	
	// v2-v1
	core.over
	flm.negate
	flm.add
	
	// 4*nSteps^2
	'nHalfSteps @ 0 core.lshift
	dup
	math.u32*u32
	flm.int2flt
	
	flm.div	
;

:varAddFltToVar
	@ over @ flm.add swap !
;
	system.dumpStack
	system.terminate

:fetchAndAdvanceDataPtr
	dup	// copy pointer address for store
	@	// retrieve data address
	dup @ >r // recall and save data
	4 + 	// advance data addresss
	dup 'dataEnd core.equals // check for end of data
	IF drop 'myData0 ENDIF // if yes, replace with start of data
	swap ! 	// store updated value
	r>	// return data
;

:loadNextPoint_fetchAndCalc
	'dataPtrA fetchAndAdvanceDataPtr // get start value
	'dataPtrB fetchAndAdvanceDataPtr // get stop value
	calcAcceleration
;

:loadNextPointToInterpolators
	loadNextPoint_fetchAndCalc
	'ddx1 ! 'x1 ! 0 'dx1 !
	loadNextPoint_fetchAndCalc
	'ddy1 ! 'y1 ! 0 'dy1 !
	loadNextPoint_fetchAndCalc
	'ddx2 ! 'x2 ! 0 'dx2 !
	loadNextPoint_fetchAndCalc
	'ddy2 ! 'y2 ! 0 'dy2 !
;

:reverseAcceleration
	dup @ flm.negate swap !
;

:main
	// === init data pointers to first and second point in list ===
	'myData0 'dataPtrA !
	'myData4 'dataPtrB !

	0 12 DO >r
	loadNextPointToInterpolators

	// === accelerating half ===
	0 'nHalfSteps @ DO >r
	  'x1 @ flm.emit system.emit.space
	  'dx1 'ddx1 varAddFltToVar
	  'x1 'dx1 varAddFltToVar

	  'y1 @ flm.emit system.emit.space
	  'dy1 'ddy1 varAddFltToVar
	  'y1 'dy1 varAddFltToVar

	  'x2 @ flm.emit system.emit.space
	  'dx2 'ddx2 varAddFltToVar
	  'x2 'dx2 varAddFltToVar

	  'y2 @ flm.emit system.emit.cr
	  'dy2 'ddy2 varAddFltToVar
	  'y2 'dy2 varAddFltToVar
	r> LOOP

	// === change to deceleration ===
	'ddx1 reverseAcceleration
	'ddy1 reverseAcceleration
	'ddx2 reverseAcceleration
	'ddy2 reverseAcceleration

	// === decelerating part ===
	0 'nHalfSteps @ DO >r
	  'x1 @ flm.emit system.emit.space
	  'dx1 'ddx1 varAddFltToVar
	  'x1 'dx1 varAddFltToVar

	  'y1 @ flm.emit system.emit.space
	  'dy1 'ddy1 varAddFltToVar
	  'y1 'dy1 varAddFltToVar

	  'x2 @ flm.emit system.emit.space
	  'dx2 'ddx2 varAddFltToVar
	  'x2 'dx2 varAddFltToVar

	  'y2 @ flm.emit system.emit.cr
	  'dy2 'ddy2 varAddFltToVar
	  'y2 'dy2 varAddFltToVar
	r> LOOP
	system.emit.cr	
r> LOOP
system.terminate
