VAR:math.scratch=0

VAR:math.scratchALo=0
VAR:math.scratchAHi=0
VAR:math.scratchBLo=0
VAR:math.scratchBHi=0
// partial products for 32x32=>64 multiplication
VAR:math.scratchLL=0
VAR:math.scratchLH=0
VAR:math.scratchHL=0
VAR:math.scratch.A=0
VAR:math.scratch.B=0
VAR:math.scratchMidSum=0

::math.negate    core.invert 1 core.plus ;

// input u1 : modifA
// input u2 : acc
// input: multiplicandB in "math.scratch"
// output u2 : updated acc
// output u1 : new modifA
:__mul32step			// ( u2 u1 -- u2 u1 )
    CALL:__mul16step		// binary iteration for 2x 16 bits
:__mul16step CALL:__mul8step
:__mul8step CALL:__mul4step
:__mul4step CALL:__mul2step
:__mul2step CALL:__mulstep
:__mulstep
    >r 				// save modifA
    1 core.lshift		// shift acc further left
    r@ 0 <s IF			// test MSB of modifA (using signed comparison, sign bit set => negative)
        'math.scratch @ +	// if bit is set, add B to acc
    ENDIF 		
    r> 1 core.lshift		// restore modifA and shift
;

// input: A32 multiplicand
// input: B32 multiplicand
// output: product
:math.u32*u32		// ( u32 u32 -- u32 )
    'math.scratch !	// store B32
    0 swap 		// initialize acc
    __mul32step 	// run multiplication
    drop		// remove modified A
;

// input: A16 multiplicand
// input: B32 multiplicand
// output: product
:math.u16*u32		// ( u16 u32 -- u32 )
    'math.scratch !	// store B32
    16 core.lshift	  	// adjust A16 for MSB check in 32 hardware bits
    0 swap 		// initialize acc
    __mul16step 	// run multiplication
    drop		// remove modified A
;

// input: A32 multiplicand
// input: B32 multiplicand
// output: product [63:32]
// output: product [31:0]
:math.u32*u32x2			// ( u32 u32 -- u32 u32 )
    0xFFFF >r			// 16 low bit mask on rstack
    dup r@ and 'math.scratchBLo !
    swap 			// push back B, continue on A
    dup r> and 'math.scratchALo ! 

    16 core.rshift 'math.scratchAHi ! 
    16 core.rshift 'math.scratchBHi ! 
    	 			// stack is now empty

    // === cross terms ====				
    'math.scratchALo @
    'math.scratchBHi @
    math.u16*u32		// mid product LH
    'math.scratchLH !

    'math.scratchAHi @
    'math.scratchBLo @
    math.u16*u32		// mid product HL
    'math.scratchHL !	    

    // === low result ===
    'math.scratchALo @		// LL
    'math.scratchBLo @
    math.u16*u32
    'math.scratchLL !

    // === add cross terms to low result ===
    'math.scratchLL @
    'math.scratchLH @ 16 core.lshift +
    'math.scratchHL @ 16 core.lshift +

    // === high result ===
    'math.scratchAHi @		// HH
    'math.scratchBHi @
    math.u16*u32

    // === add cross terms to high result ===
    'math.scratchLH @ 16 core.rshift +
    'math.scratchHL @ 16 core.rshift +

    // === carry === // TBD omit one "and"?
    'math.scratchLL @ 16 core.rshift
    'math.scratchLH @ 0xFFFF and
    'math.scratchHL @ 0xFFFF and
    +    
    +

    16 core.rshift		// carry = ((LL >> 16) + (LH+HL)[31:0]) >> 16
    + 				// add carry to high result

    swap			// return 0:lowRes, 1:highRes
;

:math.s32*s32x2
	dup
	'math.scratch.A !
	swap dup 
	'math.scratch.B !

	math.u32*u32x2		// start with unsigned multiplication	
	swap 			// flip word order: correction will be applied to res[63:32]

	'math.scratch.A @	
	0 <s IF 
		'math.scratch.B @
	ELSE
		0
	ENDIF
	'math.scratch.B @
	0 <s IF 
		'math.scratch.A @
		+
	ENDIF

	math.negate		// subtract correction term
	+

	swap 			// un-flip word order
;
