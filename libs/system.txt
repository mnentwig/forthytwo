::system.terminate
	//0 0 io! // simulator control register
	4 system.emit
;
:system.emit
    BEGIN
	 0x2000 io@ 
	 1 and 0 =
	 core.invert
    UNTIL
    0x1000 io!
;

:system.emit.cr
    system.ascii.cr system.emit
    system.ascii.nl system.emit
;

:system.emit.space
    system.ascii.space system.emit
;

:system.emit.hex8 dup 0x10 core.rshift CALL:system.emit.hex4
:system.emit.hex4 dup 0x8 core.rshift CALL:system.emit.hex2
:system.emit.hex2 dup 0x4 core.rshift CALL:system.emit.hex1
:system.emit.hex1
    0xf and
    dup 10 <s IF
        system.ascii.0
    ELSE
        87 // 'a'-10 (use lower case for C sprintf compatibility)
    ENDIF
    +
    system.emit
;

:system.dumpStack
	system.emit.cr 
	system.emit.cr
:__system.dumpStack
	core.depth 0 = IF core.return ENDIF
	core.depth -1 + system.emit.hex2 system.emit.space system.emit.hex8 system.emit.cr
	BRA:__system.dumpStack
	